import re
import argparse
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from pathlib import Path

import src.utils as utils


def plot_log_misfits(path):
    min_error, max_error = float("inf"), float("-inf")
    plt.figure()
    for realisation in path.glob('REALISATION*'):
        misfits = utils.pload(str(realisation / 'misfits.pickle'))
        plt.semilogy(range(1, len(misfits)+1), misfits)
        misfit_min_error, misfit_max_error = min(misfits), max(misfits)
        if misfit_max_error > max_error:
            max_error = misfit_max_error
        if misfit_min_error < min_error:
            min_error = misfit_min_error

    plt.xlabel(r'Iteration $k$')
    plt.ylabel(r'$\log E^k$')
    plt.grid(linestyle='dotted')

    path_string = str(path)
    landmarks = re.search('LANDMARKS=([0-9]+)', path_string).group()
    ensemble_size = re.search('ENSEMBLE_SIZE=([0-9]+)', path_string).group()
    destination = str(path / f'../log_data_misfit_{landmarks}_{ensemble_size}.pdf')
    plt.savefig(destination, bbox_inches='tight')
    plt.close()


def plot_relative_error(path):
    pass


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Plot the results generated by the script `run_enkf.py`.')
    parser.add_argument('--log_dir', type=str, default='results/')
    args = parser.parse_args()

    # run the EnKF on all the manufactured solutions in the `data` directory
    for ensemble_path in Path(args.log_dir).glob('LANDMARKS=*/TARGET*/ENSEMBLE_SIZE=*'):
        plot_log_misfits(ensemble_path)
        plot_relative_error(ensemble_path)